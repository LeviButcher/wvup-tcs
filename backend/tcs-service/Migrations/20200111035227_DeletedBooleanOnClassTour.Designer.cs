#pragma warning disable 1591

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using tcs_service.EF;

namespace tcs_service.Migrations {
    [DbContext (typeof (TCSContext))]
    [Migration ("20200111035227_DeletedBooleanOnClassTour")]
    partial class DeletedBooleanOnClassTour {
        protected override void BuildTargetModel (ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation ("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation ("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation ("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity ("tcs_service.Models.Class", b => {
                b.Property<int> ("CRN");

                b.Property<int> ("DepartmentCode");

                b.Property<string> ("Name")
                    .IsRequired ();

                b.Property<string> ("ShortName")
                    .IsRequired ();

                b.HasKey ("CRN");

                b.HasIndex ("DepartmentCode");

                b.ToTable ("Classes");
            });

            modelBuilder.Entity ("tcs_service.Models.ClassTour", b => {
                b.Property<int> ("Id")
                    .ValueGeneratedOnAdd ();

                b.Property<DateTime> ("DayVisited");

                b.Property<bool> ("Deleted");

                b.Property<string> ("Name")
                    .IsRequired ();

                b.Property<int> ("NumberOfStudents");

                b.HasKey ("Id");

                b.ToTable ("ClassTours");
            });

            modelBuilder.Entity ("tcs_service.Models.Department", b => {
                b.Property<int> ("Code");

                b.Property<string> ("Name")
                    .IsRequired ();

                b.HasKey ("Code");

                b.ToTable ("Departments");
            });

            modelBuilder.Entity ("tcs_service.Models.Person", b => {
                b.Property<int> ("Id");

                b.Property<string> ("Email")
                    .IsRequired ();

                b.Property<string> ("FirstName")
                    .IsRequired ();

                b.Property<string> ("LastName")
                    .IsRequired ();

                b.Property<int> ("PersonType");

                b.HasKey ("Id");

                b.ToTable ("People");
            });

            modelBuilder.Entity ("tcs_service.Models.Reason", b => {
                b.Property<int> ("Id")
                    .ValueGeneratedOnAdd ();

                b.Property<bool> ("Deleted");

                b.Property<string> ("Name")
                    .IsRequired ();

                b.HasKey ("Id");

                b.ToTable ("Reasons");
            });

            modelBuilder.Entity ("tcs_service.Models.Schedule", b => {
                b.Property<int> ("ClassCRN");

                b.Property<int> ("PersonId");

                b.Property<int> ("SemesterCode");

                b.HasKey ("ClassCRN", "PersonId", "SemesterCode");

                b.HasIndex ("PersonId");

                b.HasIndex ("SemesterCode");

                b.ToTable ("Schedules");
            });

            modelBuilder.Entity ("tcs_service.Models.Semester", b => {
                b.Property<int> ("Code");

                b.HasKey ("Code");

                b.ToTable ("Semesters");
            });

            modelBuilder.Entity ("tcs_service.Models.Session", b => {
                b.Property<int> ("Id")
                    .ValueGeneratedOnAdd ();

                b.Property<bool> ("Deleted");

                b.Property<DateTime> ("InTime");

                b.Property<DateTime?> ("OutTime");

                b.Property<int> ("PersonId");

                b.Property<int> ("SemesterCode");

                b.Property<bool> ("Tutoring");

                b.HasKey ("Id");

                b.HasIndex ("PersonId");

                b.HasIndex ("SemesterCode");

                b.ToTable ("Sessions");
            });

            modelBuilder.Entity ("tcs_service.Models.SessionClass", b => {
                b.Property<int> ("SessionId");

                b.Property<int> ("ClassId");

                b.HasKey ("SessionId", "ClassId");

                b.HasAlternateKey ("ClassId", "SessionId");

                b.ToTable ("SessionClasses");
            });

            modelBuilder.Entity ("tcs_service.Models.SessionReason", b => {
                b.Property<int> ("SessionId");

                b.Property<int> ("ReasonId");

                b.HasKey ("SessionId", "ReasonId");

                b.HasAlternateKey ("ReasonId", "SessionId");

                b.ToTable ("SessionReasons");
            });

            modelBuilder.Entity ("tcs_service.Models.User", b => {
                b.Property<int> ("Id")
                    .ValueGeneratedOnAdd ();

                b.Property<string> ("FirstName");

                b.Property<string> ("LastName");

                b.Property<byte[]> ("PasswordHash");

                b.Property<byte[]> ("PasswordSalt");

                b.Property<string> ("Username")
                    .IsRequired ()
                    .HasMaxLength (25);

                b.HasKey ("Id");

                b.ToTable ("Users");
            });

            modelBuilder.Entity ("tcs_service.Models.Class", b => {
                b.HasOne ("tcs_service.Models.Department", "Department")
                    .WithMany ("Classes")
                    .HasForeignKey ("DepartmentCode")
                    .OnDelete (DeleteBehavior.Cascade);
            });

            modelBuilder.Entity ("tcs_service.Models.Schedule", b => {
                b.HasOne ("tcs_service.Models.Class", "Class")
                    .WithMany ()
                    .HasForeignKey ("ClassCRN")
                    .OnDelete (DeleteBehavior.Cascade);

                b.HasOne ("tcs_service.Models.Person", "Person")
                    .WithMany ("Schedules")
                    .HasForeignKey ("PersonId")
                    .OnDelete (DeleteBehavior.Cascade);

                b.HasOne ("tcs_service.Models.Semester", "Semester")
                    .WithMany ()
                    .HasForeignKey ("SemesterCode")
                    .OnDelete (DeleteBehavior.Cascade);
            });

            modelBuilder.Entity ("tcs_service.Models.Session", b => {
                b.HasOne ("tcs_service.Models.Person", "Person")
                    .WithMany ()
                    .HasForeignKey ("PersonId")
                    .OnDelete (DeleteBehavior.Cascade);

                b.HasOne ("tcs_service.Models.Semester", "Semester")
                    .WithMany ()
                    .HasForeignKey ("SemesterCode")
                    .OnDelete (DeleteBehavior.Cascade);
            });

            modelBuilder.Entity ("tcs_service.Models.SessionClass", b => {
                b.HasOne ("tcs_service.Models.Class", "Class")
                    .WithMany ("SessionClasses")
                    .HasForeignKey ("ClassId")
                    .OnDelete (DeleteBehavior.Cascade);

                b.HasOne ("tcs_service.Models.Session", "Session")
                    .WithMany ("SessionClasses")
                    .HasForeignKey ("SessionId")
                    .OnDelete (DeleteBehavior.Cascade);
            });

            modelBuilder.Entity ("tcs_service.Models.SessionReason", b => {
                b.HasOne ("tcs_service.Models.Reason", "Reason")
                    .WithMany ("SessionReasons")
                    .HasForeignKey ("ReasonId")
                    .OnDelete (DeleteBehavior.Cascade);

                b.HasOne ("tcs_service.Models.Session", "Session")
                    .WithMany ("SessionReasons")
                    .HasForeignKey ("SessionId")
                    .OnDelete (DeleteBehavior.Cascade);
            });
#pragma warning restore 612, 618
        }
    }
}